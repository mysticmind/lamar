import{o as n,c as s,a as e,b as a}from"./app.21b67795.js";const t='{"title":"Overriding Service Registrations","description":"","frontmatter":{"title":"Overriding Service Registrations","editLink":true},"relativePath":"guide/ioc/registration/overrides.md","lastUpdated":1630569938701}',o={},p=a('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>There is the new <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.testhost.webhostbuilderextensions.configuretestservices?view=aspnetcore-5.0" target="_blank" rel="noopener noreferrer">ConfigureTestServices()</a> method in <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core 5 that purports to do the same thing, but the Lamar team believes that the mechanism shown here will be more &quot;correct&quot; and also allows you to use Lamar specific features.</p></div><p>A new feature in Lamar v5.1 is a long requested way to reliably override service registrations in .Net Core applications bootstrapped by the <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-5.0" target="_blank" rel="noopener noreferrer">generic host builder</a>.</p><p>Let&#39;s say that in test automation scenarios you&#39;d like to override some of the services in your normal application with testing stubs or to overwrite some kind of configuration. What you need to do is to take the <code>IHostBuilder</code> or <code>IWebHostBuilder</code> <strong>just as it is built by your application&#39;s bootstrapping</strong>, but apply service registrations that take precedence in Lamar over other registrations. That&#39;s a little trickier than you might think because the <code>HostBuilder</code> / <code>WebHostBuilder</code> applies service registrations in different places during bootstrapping, with registrations from <code>Startup.ConfigureServices()</code> taking precedence in normal usage.</p><p>That&#39;s where the new <code>OverrideServices()</code> extension method comes into play. As an example, let&#39;s say that in a test harness we want to just replace the normal <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core <code>IServer</code> service with a fake implementation called <code>FakeServer</code>. The following is the code to do exactly that:</p>',4),c=a('<p><a id="snippet-sample_usage_of_overrides"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">sample_usage_of_overrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> Program\n        <span class="token punctuation">.</span><span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n        <span class="token comment">// This is our chance to make service overrides</span>\n        <span class="token punctuation">.</span><span class="token function">OverrideServices</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span>\n        <span class="token punctuation">{</span>\n            s<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FakeServer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    host<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FakeServer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.AspNetCoreTests/integration_with_aspnetcore.cs#L213-L233" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_usage_of_overrides" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>In the code above, the lambda passed into the <code>OverrideServices()</code> method is executed in the Lamar <code>Container</code> initialization <strong>after all other other explicit registrations and policies have been combined</strong>. In effect, this means that any registrations -- or removal of registrations -- in the <code>OverrideServices()</code> call are guaranteed to be processed last and reliably override any original registrations.</p><p>The <code>OverrideServices()</code> extension methods are available for both <code>IHostBuilder</code> and <code>IWebHostBuilder</code>.</p>',5);o.render=function(a,t,o,i,r,l){return n(),s("div",null,[p,e(" snippet: sample_usage_of_overrides "),c])};export{t as __pageData,o as default};
