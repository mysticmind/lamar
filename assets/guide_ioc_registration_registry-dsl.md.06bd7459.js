import{o as n,c as s,a,b as t}from"./app.21b67795.js";const p='{"title":"ServiceRegistry DSL","description":"","frontmatter":{},"headers":[{"level":2,"title":"The ServiceRegistry Class","slug":"the-serviceregistry-class"},{"level":2,"title":"Including Other ServiceRegistry Objects","slug":"including-other-serviceregistry-objects"},{"level":2,"title":"Use versus Add","slug":"use-versus-add"},{"level":2,"title":"Registrations with For().Use()/Add()","slug":"registrations-with-for-use-add"},{"level":2,"title":"Add Many Registrations with For().AddInstances()","slug":"add-many-registrations-with-for-addinstances"},{"level":2,"title":"Named Instances","slug":"named-instances"},{"level":2,"title":"Inverse Registrations with Use().For()","slug":"inverse-registrations-with-use-for"}],"relativePath":"guide/ioc/registration/registry-dsl.md","lastUpdated":1630569938701}',e={},o=t('<h1 id="serviceregistry-dsl"><a class="header-anchor" href="#serviceregistry-dsl" aria-hidden="true">#</a> ServiceRegistry DSL</h1><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>Lamar&#39;s <em>ServiceRegistry</em> is the equivalent to StructureMap&#39;s <em>Registry</em>, but the name was changed to disambiguate from the nearly infinite number of other <em>Registry</em> types in .NET.</p></div><p>Creating <code>ServiceRegistry</code> classes is the recommended way of using the Registry DSL.</p><p>The Registry DSL is mostly a <a href="http://martinfowler.com/bliki/FluentInterface.html" target="_blank" rel="noopener noreferrer">fluent interface</a> with some nested <a href="http://en.wikipedia.org/wiki/Closure_%28computer_programming%29" target="_blank" rel="noopener noreferrer">closure</a> usage. The intent of the Registry DSL is to make the configuration process as error free as possible by using &quot;compiler safe&quot; expressions and defensive programming to point out missing data.</p><h2 id="the-serviceregistry-class"><a class="header-anchor" href="#the-serviceregistry-class" aria-hidden="true">#</a> The ServiceRegistry Class</h2><p>On all but the smallest systems, the main unit of configuration will probably be the <code>ServiceRegistry</code> class. Typically, you would subclass the <code>ServiceRegistry</code> class, then use the <a href="https://en.wikipedia.org/wiki/Fluent_interface" target="_blank" rel="noopener noreferrer">fluent interface</a> methods exposed by the Registry class to create Container configuration. Here&#39;s a sample <code>ServiceRegistry</code> class below used to configure an instance of an <code>IWidget</code> interface:</p>',6),c=t('<p><a id="snippet-sample_simple-registry"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PurpleRegistry</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServiceRegistry</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">PurpleRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Configuration/DSL/RegistryTester.cs#L35-L44" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_simple-registry" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><h2 id="including-other-serviceregistry-objects"><a class="header-anchor" href="#including-other-serviceregistry-objects" aria-hidden="true">#</a> Including Other ServiceRegistry Objects</h2><p>The next question is &quot;how does my new <code>ServiceRegistry</code> class get used?&quot;</p><p>When you set up a <code>Container</code>, you need to simply direct the <code>Container</code> to use the configuration in that <code>ServiceRegistry</code> class:</p>',6),i=t('<p><a id="snippet-sample_including-registries"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">include_a_registry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Registry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    registry<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IncludeRegistry</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>YellowBlueRegistry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    registry<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IncludeRegistry</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RedGreenRegistry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    registry<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IncludeRegistry</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PurpleRegistry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// build a container</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// verify the default implementation and total registered implementations</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAllInstances</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ShouldBe</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Configuration/DSL/RegistryTester.cs#L101-L116" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_including-registries" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><h2 id="use-versus-add"><a class="header-anchor" href="#use-versus-add" aria-hidden="true">#</a> <em>Use</em> versus <em>Add</em></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This behavior changed from StructureMap. Lamar follows the now common approach mandated by <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core that the last registration for a certain service type wins. So no more special meaning to Use() vs. Add().</p></div><p><strong>There is no difference in behavior between <em>Use</em> and <em>Add</em> in Lamar</strong>. The two methods are synonyms and mostly remain in Lamar to provide and easier migration path from <a href="https://structuremap.github.io" target="_blank" rel="noopener noreferrer">StructureMap</a>. The</p><h2 id="registrations-with-for-use-add"><a class="header-anchor" href="#registrations-with-for-use-add" aria-hidden="true">#</a> Registrations with For().Use()/Add()</h2><p>To register an <code>Instance</code> of a type, the syntax is one of the <code>Registry.For().Use()</code> overloads shown below:</p>',8),u=t('<p><a id="snippet-sample_settingdefaults"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SettingDefaults</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServiceRegistry</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">SettingDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// If you know the plugin type and its a closed type</span>\n        <span class="token comment">// you can use this syntax</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// By Lambda</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DefaultWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Pre-existing object</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// This is rare now, but still valid</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// makes AWidget the default</span>\n\n        <span class="token comment">// Also rare, but you can supply an Instance object</span>\n        <span class="token comment">// yourself for special needs</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySpecialInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// If you&#39;re registering an open generic type</span>\n        <span class="token comment">// or you just have Type objects, use this syntax</span>\n        <span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token type-expression class-name">IService<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token type-expression class-name">Service<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// This is occasionally useful for generic types</span>\n        <span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token type-expression class-name">IService<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySpecialInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/basic_registrations.cs#L22-L54" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_settingdefaults" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>or</p>',4),l=t('<p><a id="snippet-sample_additionalregistrations"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdditionalRegistrations</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServiceRegistry</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">AdditionalRegistrations</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// If you know the plugin type and its a closed type</span>\n        <span class="token comment">// you can use this syntax</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// By Lambda</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DefaultWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Pre-existing object</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Also rare, but you can supply an Instance object</span>\n        <span class="token comment">// yourself for special needs</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySpecialInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// If you&#39;re registering an open generic type</span>\n        <span class="token comment">// or you just have Type objects, use this syntax</span>\n        <span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IService<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Service<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// This is occasionally useful for generic types</span>\n        <span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IService<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySpecialInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/basic_registrations.cs#L55-L82" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_additionalregistrations" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><h2 id="add-many-registrations-with-for-addinstances"><a class="header-anchor" href="#add-many-registrations-with-for-addinstances" aria-hidden="true">#</a> Add Many Registrations with For().AddInstances()</h2><p>If you need to add several <code>Instances</code> to a single service type, the <code>AddInstances()</code> syntax shown below may be quicker and easier to use:</p>',5),r=t('<p><a id="snippet-sample_using-addinstances"></a></p><div class="language-cs"><pre><code><span class="token comment">// registry is a StructureMap Registry object</span>\nregistry<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddInstances</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// Equivalent to For&lt;IService&gt;().Add&lt;ColorService&gt;().....</span>\n    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Type</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ColorService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ctor</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Equivalent to For&lt;IService&gt;().Add(new ColorService(&quot;Yellow&quot;))......</span>\n    x<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ColorService</span><span class="token punctuation">(</span><span class="token string">&quot;Yellow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;Yellow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Equivalent to For&lt;IService&gt;().Use(() =&gt; new ColorService(&quot;Purple&quot;))....</span>\n    x<span class="token punctuation">.</span><span class="token function">ConstructedBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ColorService</span><span class="token punctuation">(</span><span class="token string">&quot;Purple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;Purple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Type</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ColorService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;Decorated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ctor</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span><span class="token string">&quot;Orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Configuration/DSL/InterceptAllInstancesOfPluginTypeTester.cs#L31-L48" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-addinstances" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><h2 id="named-instances"><a class="header-anchor" href="#named-instances" aria-hidden="true">#</a> Named Instances</h2><p>When you have multiple implementations of an interface, it can often be useful to name instances. To retrieve a specific implementation:</p>',5),k=t('<p><a id="snippet-sample_named-instance"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SimpleCaseWithNamedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;MyInstance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// retrieve an instance by name</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> widget <span class="token operator">=</span> <span class="token punctuation">(</span>AWidget<span class="token punctuation">)</span>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;MyInstance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    widget<span class="token punctuation">.</span><span class="token function">ShouldNotBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Configuration/DSL/AddInstanceTester.cs#L63-L73" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_named-instance" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>You can also register named instances with the following shorthand:</p>',4),d=t('<p><a id="snippet-sample_named-instances-shorthand"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">A_concrete_type_is_available_by_name_when_it_is_added_by_the_shorthand_mechanism</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">IContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddInstances</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Type</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RedAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Type</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GreenAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;Green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Type</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BlueAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;Blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Type</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PurpleAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// retrieve the instances by name</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RedAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GreenAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BlueAddTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Configuration/DSL/AddTypesTester.cs#L29-L46" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_named-instances-shorthand" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><h2 id="inverse-registrations-with-use-for"><a class="header-anchor" href="#inverse-registrations-with-use-for" aria-hidden="true">#</a> Inverse Registrations with Use().For()</h2><p>In some scenarios, a type may implement multiple interfaces. You could register this with a separate <code>For().Use()</code> line for each interface, but if the type is to be a singleton, then registering it this way will give you a <em>different</em> singleton instance for each interface. To use the same instance across multiple interfaces, you can use the reverse syntax.</p>',5),g=t('<p><a id="snippet-sample_inverse-registration"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">when_singleton_both_interfaces_give_same_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>services <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Implementation<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServiceA<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServiceB<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name"><span class="token keyword">var</span></span> instanceA <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServiceA<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> instanceB <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServiceB<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    instanceA<span class="token punctuation">.</span><span class="token function">ShouldBeTheSameAs</span><span class="token punctuation">(</span>instanceB<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/one_instance_across_multiple_interfaces.cs#L7-L25" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_inverse-registration" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>The same thing works for scoped registrations; using <code>.Scoped()</code> in place of <code>.Singleton()</code> in the above sample would result in the same instance being returned when resolving any one of the registered interfaces for the duration of the scope.</p><p>A transient registration can also be made using <code>.Transient()</code>, in which case the behaviour is exactly the same as with the more usual <code>For().Use()</code> syntax; it&#39;s just a convenient shorthand in the case of a type that implements many interfaces.</p>',5);e.render=function(t,p,e,m,h,f){return n(),s("div",null,[o,a(" snippet: sample_simple-registry "),c,a(" snippet: sample_including-registries "),i,a(" snippet: sample_SettingDefaults "),u,a(" snippet: sample_AdditionalRegistrations "),l,a(" snippet: sample_Using-AddInstances "),r,a(" snippet: sample_named-instance "),k,a(" snippet: sample_named-instances-shorthand "),d,a(" snippet: sample_inverse-registration "),g])};export{p as __pageData,e as default};
