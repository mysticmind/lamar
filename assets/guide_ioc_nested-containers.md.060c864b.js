import{o as n,c as s,a,d as t,e,b as p}from"./app.21b67795.js";const o='{"title":"Nested Containers (Per Request/Transaction)","description":"","frontmatter":{},"relativePath":"guide/ioc/nested-containers.md","lastUpdated":1630569938693}',c={},i=t("h1",{id:"nested-containers-per-request-transaction"},[t("a",{class:"header-anchor",href:"#nested-containers-per-request-transaction","aria-hidden":"true"},"#"),e(" Nested Containers (Per Request/Transaction)")],-1),u=t("div",{class:"tip custom-block"},[t("p",{class:"custom-block-title"},"INFO"),t("p",null,'If you\'re coming from StructureMap, do note that Lamar does not yet support the concept of "child" containers')],-1),l=t("p",null,[t("em",null,"Nested Container's"),e(" are a powerful feature in Lamar for service resolution and clean object disposal in the context of short lived operations like HTTP requests or handling a message within some kind of service bus. A "),t("em",null,"nested container"),e(" is specific to the scope of that operation and is should not live on outside of that scope.")],-1),r=t("p",null,"Here's a sample of a nested container in action:",-1),k=p('<p><a id="snippet-sample_using-nested-container"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">using_nested_containers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">,</span> AWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IService<span class="token punctuation">,</span> WhateverService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IClock<span class="token punctuation">,</span> Clock<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name"><span class="token keyword">var</span></span> rootWidget <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> rootService <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name"><span class="token keyword">var</span></span> nested <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">GetNestedContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// Singleton scoped objects are the same</span>\n    nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">ShouldBeSameAs</span><span class="token punctuation">(</span>rootWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// Scoped objects are specific to the container</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> nestedService <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    nestedService\n        <span class="token punctuation">.</span><span class="token function">ShouldNotBeSameAs</span><span class="token punctuation">(</span>rootService<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">ShouldBeSameAs</span><span class="token punctuation">(</span>nestedService<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Samples/NestedContainer.cs#L11-L39" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-nested-container" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>You probably won&#39;t directly interact with nested containers, but do note that they are used behind the scenes at runtime of basically every popular application framework in .Net these days (<a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core, NServiceBus, MassTransit, NancyFx, you name it).</p>',4);c.render=function(t,e,p,o,c,d){return n(),s("div",null,[i,u,l,r,a(" snippet: sample_using-nested-container "),k])};export{o as __pageData,c as default};
