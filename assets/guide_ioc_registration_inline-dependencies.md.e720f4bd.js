import{o as n,c as s,a,b as t}from"./app.21b67795.js";const p='{"title":"Inline Dependencies","description":"","frontmatter":{},"headers":[{"level":2,"title":"Event Condition Action Rules","slug":"event-condition-action-rules"},{"level":2,"title":"Constructor Parameters by Type","slug":"constructor-parameters-by-type"},{"level":2,"title":"Specifying the Argument Name","slug":"specifying-the-argument-name"},{"level":2,"title":"Setter Dependencies","slug":"setter-dependencies"},{"level":2,"title":"Enumerable Dependencies","slug":"enumerable-dependencies"},{"level":2,"title":"Programmatic Configuration outside of the Registry DSL","slug":"programmatic-configuration-outside-of-the-registry-dsl"}],"relativePath":"guide/ioc/registration/inline-dependencies.md","lastUpdated":1630569938701}',e={},o=t('<h1 id="inline-dependencies"><a class="header-anchor" href="#inline-dependencies" aria-hidden="true">#</a> Inline Dependencies</h1><p>While you generally allow Lamar to just use <em>auto-wiring</em> to fill the dependencies of a concrete type, there are times when you may want to explicitly configure individual dependencies on a case by case basis. In the case of <em>primitive</em> types like strings or numbers, Lamar <strong>will not</strong> do any auto-wiring, so it&#39;s incumbent upon you the user to supply the dependency.</p><p>Let&#39;s say we have a simple class called <code>ColorWidget</code> like the following:</p>',3),c=t('<p><a id="snippet-sample_inline-dependencies-colorwidget"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColorWidget</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IWidget</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">ColorWidget</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> color<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Color <span class="token operator">=</span> color<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Color <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token preprocessor property">#<span class="token directive keyword">region</span> ICloneable Members</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing.Widget/IWidget.cs#L14-L31" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_inline-dependencies-colorwidget" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>To register the <code>ColorWidget</code>, you would supply the value of the <code>color</code> parameter to the constructor function like so:</p>',4),l=t('<p><a id="snippet-sample_inline-dependencies-value"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">inline_usage_of_primitive_constructor_argument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ColorWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ctor</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ColorWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">ShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/inline_dependencies.cs#L19-L34" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_inline-dependencies-value" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><h2 id="event-condition-action-rules"><a class="header-anchor" href="#event-condition-action-rules" aria-hidden="true">#</a> Event Condition Action Rules</h2><p>The ability to explicitly define dependencies inline isn&#39;t commonly used these days, but was actually one of the very core use cases in the initial versions of Lamar. One of the first usages of Lamar in a production application was in a configurable rules engine using an <a href="http://en.wikipedia.org/wiki/Event_condition_action" target="_blank" rel="noopener noreferrer">Event-Condition-Action</a> architecture where the conditions and actions were configured in Lamar as inline dependencies of <em>Rule</em> objects. Using Lamar&#39;s old Xml configuration, we could define rules for new customers by registering rule objects with the container that reused existing <em>condition</em> and <em>action</em> classes in new configurations.</p><p>To make that concrete and establish a sample problem domain, consider these types:</p>',6),i=t('<p><a id="snippet-sample_inline-dependencies-rule-classes"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeEvent</span>\n<span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICondition</span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Matches</span><span class="token punctuation">(</span><span class="token class-name">SomeEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAction</span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PerformWork</span><span class="token punctuation">(</span><span class="token class-name">SomeEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEventRule</span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessEvent</span><span class="token punctuation">(</span><span class="token class-name">SomeEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/inline_dependencies.cs#L36-L56" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_inline-dependencies-rule-classes" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>Now, let&#39;s move on to seeing how we could use inline dependency configuration to register new rules.</p><h2 id="constructor-parameters-by-type"><a class="header-anchor" href="#constructor-parameters-by-type" aria-hidden="true">#</a> Constructor Parameters by Type</h2><p>First off, let&#39;s say that we have a <code>SimpleRule</code> that takes a single condition and action:</p>',6),u=t('<p><a id="snippet-sample_inline-dependencies-simplerule"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleRule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEventRule</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ICondition</span> _condition<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IAction</span> _action<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token function">SimpleRule</span><span class="token punctuation">(</span><span class="token class-name">ICondition</span> condition<span class="token punctuation">,</span> <span class="token class-name">IAction</span> action<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _condition <span class="token operator">=</span> condition<span class="token punctuation">;</span>\n        _action <span class="token operator">=</span> action<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessEvent</span><span class="token punctuation">(</span><span class="token class-name">SomeEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_condition<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            _action<span class="token punctuation">.</span><span class="token function">PerformWork</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/inline_dependencies.cs#L58-L79" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_inline-dependencies-simplerule" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>Now, since <code>SimpleRule</code> has only a single dependency on both <code>IAction</code> and <code>ICondition</code>, we can create new rules by registering new Instance&#39;s of <code>SimpleRule</code> with different combinations of its dependencies:</p>',4),k=t('<p><a id="snippet-sample_inline-dependencies-simple-ctor-injection"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InlineCtorArgs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServiceRegistry</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">InlineCtorArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Defining args by type</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEventRule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SimpleRule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ctor</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ICondition<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Condition1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ctor</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAction<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Action1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;One&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Pass the explicit values for dependencies</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEventRule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SimpleRule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ctor</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ICondition<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Condition2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ctor</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAction<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;Two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Rarely used, but gives you a &quot;do any crazy thing&quot; option</span>\n        <span class="token comment">// Pass in your own Instance object</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEventRule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SimpleRule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ctor</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAction<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySpecialActionInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigCondition</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICondition</span></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token function">BigCondition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> number<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Matches</span><span class="token punctuation">(</span><span class="token class-name">SomeEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySpecialActionInstance</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Instance</span></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token function">MySpecialActionInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IAction</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IAction</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ServiceLifetime<span class="token punctuation">.</span>Transient<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Func<span class="token punctuation">&lt;</span>Scope<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">ToResolver</span><span class="token punctuation">(</span><span class="token class-name">Scope</span> topScope<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token class-name">Scope</span> scope<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Variable</span> <span class="token function">CreateVariable</span><span class="token punctuation">(</span><span class="token class-name">BuildMode</span> mode<span class="token punctuation">,</span> <span class="token class-name">ResolverVariables</span> variables<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isRoot<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/inline_dependencies.cs#L113-L173" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_inline-dependencies-simple-ctor-injection" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>The inline dependency configuration using the <code>Ctor&lt;&gt;().Is()</code> syntax supports all the common Lamar configuration options: define by type, by lambdas, by value, or if you really want to risk severe eye strain, you can use your own Instance objects and define the configuration of your dependency&#39;s dependencies.</p><h2 id="specifying-the-argument-name"><a class="header-anchor" href="#specifying-the-argument-name" aria-hidden="true">#</a> Specifying the Argument Name</h2><p>If for some reason you need to specify an inline constructor argument dependency, and the concrete type has more than one dependency for that type, you just need to specify the parameter name as shown in this sample:</p>',6),r=t('<p><a id="snippet-sample_inline-dependencies-ctor-by-name"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DualConditionRule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEventRule</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ICondition</span> _first<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ICondition</span> _second<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IAction</span> _action<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token function">DualConditionRule</span><span class="token punctuation">(</span><span class="token class-name">ICondition</span> first<span class="token punctuation">,</span> <span class="token class-name">ICondition</span> second<span class="token punctuation">,</span> <span class="token class-name">IAction</span> action<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _first <span class="token operator">=</span> first<span class="token punctuation">;</span>\n        _second <span class="token operator">=</span> second<span class="token punctuation">;</span>\n        _action <span class="token operator">=</span> action<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessEvent</span><span class="token punctuation">(</span><span class="token class-name">SomeEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_first<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span> <span class="token operator">||</span> _second<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            _action<span class="token punctuation">.</span><span class="token function">PerformWork</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DualConditionRuleRegistry</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServiceRegistry</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">DualConditionRuleRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// In this case, because DualConditionRule</span>\n        <span class="token comment">// has two different</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEventRule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DualConditionRule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ctor</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ICondition<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Condition1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ctor</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ICondition<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Condition2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/inline_dependencies.cs#L175-L210" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_inline-dependencies-ctor-by-name" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><h2 id="setter-dependencies"><a class="header-anchor" href="#setter-dependencies" aria-hidden="true">#</a> Setter Dependencies</h2><p>You can also configure setter dependencies with a similar syntax, but with additional options to specify the property name by using an <code>Expression</code> as shown below:</p>',5),d=t('<p><a id="snippet-sample_inline-dependencies-setters"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleWithSetters</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEventRule</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">ICondition</span> Condition <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">IAction</span> Action <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessEvent</span><span class="token punctuation">(</span><span class="token class-name">SomeEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>Condition<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            Action<span class="token punctuation">.</span><span class="token function">PerformWork</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleWithSettersRegistry</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServiceRegistry</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">RuleWithSettersRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEventRule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RuleWithSetters<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Setter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ICondition<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Condition1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n            <span class="token comment">// or if you need to specify the property name</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Setter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAction<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Action2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/inline_dependencies.cs#L212-L240" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_inline-dependencies-setters" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>The <code>Ctor</code> and <code>Setter</code> methods are just syntactic sugar. Both methods store data to the same underlying structure.</p></div><h2 id="enumerable-dependencies"><a class="header-anchor" href="#enumerable-dependencies" aria-hidden="true">#</a> Enumerable Dependencies</h2><p>TODO(show a sample of using enumerable dependencies)</p><h2 id="programmatic-configuration-outside-of-the-registry-dsl"><a class="header-anchor" href="#programmatic-configuration-outside-of-the-registry-dsl" aria-hidden="true">#</a> Programmatic Configuration outside of the Registry DSL</h2><p>In some cases, you may want to skip the Registry DSL and go straight for the raw dependencies structures. Let&#39;s say thatwe&#39;re using an open generic type for our rules engine so that we can respond to multiple event types:</p>',8),m=t('<p><a id="snippet-sample_inline-dependencies-open-types"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEventRule<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessEvent</span><span class="token punctuation">(</span><span class="token class-name">TEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICondition<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Matches</span><span class="token punctuation">(</span><span class="token class-name">TEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Condition1<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICondition<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Matches</span><span class="token punctuation">(</span><span class="token class-name">TEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAction<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PerformWork</span><span class="token punctuation">(</span><span class="token class-name">TEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Action1<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAction<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PerformWork</span><span class="token punctuation">(</span><span class="token class-name">TEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventRule<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEventRule<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ICondition<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span> _condition<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IAction<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span> _action<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token function">EventRule</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name">ICondition<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span> condition<span class="token punctuation">,</span> <span class="token class-name">IAction<span class="token punctuation">&lt;</span>TEvent<span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        _condition <span class="token operator">=</span> condition<span class="token punctuation">;</span>\n        _action <span class="token operator">=</span> action<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name\n    <span class="token punctuation">{</span>\n        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessEvent</span><span class="token punctuation">(</span><span class="token class-name">TEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_condition<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            _action<span class="token punctuation">.</span><span class="token function">PerformWork</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/inline_dependencies.cs#L242-L301" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_inline-dependencies-open-types" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>It&#39;s frequently useful to explicitly configure all the elements for an enumerable argument (arrays, IEnumerable, or IList). Lamar provides this syntax to do just that:</p>',4),y=t('<p><a id="snippet-sample_inline-dependencies-enumerables"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigRule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEventRule</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>ICondition<span class="token punctuation">&gt;</span></span> _conditions<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IAction<span class="token punctuation">&gt;</span></span> _actions<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token function">BigRule</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>ICondition<span class="token punctuation">&gt;</span></span> conditions<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IAction<span class="token punctuation">&gt;</span></span> actions<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _conditions <span class="token operator">=</span> conditions<span class="token punctuation">;</span>\n        _actions <span class="token operator">=</span> actions<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessEvent</span><span class="token punctuation">(</span><span class="token class-name">SomeEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_conditions<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            _actions<span class="token punctuation">.</span><span class="token function">Each</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">PerformWork</span><span class="token punctuation">(</span>@<span class="token keyword">event</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/inline_dependencies.cs#L305-L327" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_inline-dependencies-enumerables" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p>',3);e.render=function(t,p,e,g,w,f){return n(),s("div",null,[o,a(" snippet: sample_inline-dependencies-ColorWidget "),c,a(" snippet: sample_inline-dependencies-value "),l,a(" snippet: sample_inline-dependencies-rule-classes "),i,a(" snippet: sample_inline-dependencies-SimpleRule "),u,a(" snippet: sample_inline-dependencies-simple-ctor-injection "),k,a(" snippet: sample_inline-dependencies-ctor-by-name "),r,a(" snippet: sample_inline-dependencies-setters "),d,a(" snippet: sample_inline-dependencies-open-types "),m,a(" snippet: sample_inline-dependencies-enumerables "),y])};export{p as __pageData,e as default};
