import{o as e,c as r,b as i}from"./app.21b67795.js";const a='{"title":"Resolving Services","description":"","frontmatter":{},"relativePath":"guide/ioc/resolving/index.md","lastUpdated":1630569938705}',t={},o=i('<h1 id="resolving-services"><a class="header-anchor" href="#resolving-services" aria-hidden="true">#</a> Resolving Services</h1><p>This will be the easy part of interacting with Lamar. During application execution, you will need to <em>resolve</em> the services you previously registered in the container. When you ask Lamar to resolve a service, Lamar either creates a new object instance or finds the previously built object for the correct <a href="/guide/ioc/lifetime.html">service lifetimes</a>.</p><p>While in many systems you will probably only resolve the default service of a type or a named instance of a service, there are far more ways to resolve services exposed by StructureMap. The <code>IContainer</code> interface acts as a <a href="http://en.wikipedia.org/wiki/Service_locator_pattern" target="_blank" rel="noopener noreferrer">Service Locator</a> to build and resolve configured services on demand.</p>',3);t.render=function(i,a,t,s,n,c){return e(),r("div",null,[o])};export{a as __pageData,t as default};
