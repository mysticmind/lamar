import{o as s,c as n,a,b as t}from"./app.21b67795.js";const p='{"title":"Generic Types","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example 1: Visualizing an Activity Log","slug":"example-1-visualizing-an-activity-log"},{"level":2,"title":"Registering Open Generic Types","slug":"registering-open-generic-types"},{"level":2,"title":"Generic Registrations and Default Fallbacks","slug":"generic-registrations-and-default-fallbacks"},{"level":2,"title":"Connecting Generic Implementations with Type Scanning","slug":"connecting-generic-implementations-with-type-scanning"}],"relativePath":"guide/ioc/generics.md","lastUpdated":1630569938697}',e={},o=t('<h1 id="generic-types"><a class="header-anchor" href="#generic-types" aria-hidden="true">#</a> Generic Types</h1><p>Lamar comes with some power abilities to exploit <a href="https://msdn.microsoft.com/en-us/library/ms172334(v=vs.110).aspx" target="_blank" rel="noopener noreferrer">open generic types</a> in .Net for extensibility and flexible handling within your system.</p><h2 id="example-1-visualizing-an-activity-log"><a class="header-anchor" href="#example-1-visualizing-an-activity-log" aria-hidden="true">#</a> Example 1: Visualizing an Activity Log</h2><p>I worked years ago on a system that could be used to record and resolve customer support problems. Since it was very workflow heavy in its logic, we tracked user and system activity as an <em>event stream</em> of small objects that reflected all the different actions or state changes that could happen to an issue. To render and visualize the activity log to HTML, we used many of the open generic type capabilities shown in this topic to find and apply the correct HTML rendering strategy for each type of log object in an activity stream.</p><p>Given a log object, we wanted to look up the right visualizer strategy to render that type of log object to html on the server side.</p><p>To start, we had an interface like this one that we were going to use to get the HTML for each log object:</p>',6),c=t('<p><a id="snippet-sample_ilogvisualizer"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILogVisualizer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// If we already know what the type of log we have</span>\n    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">ToHtml</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TLog<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">TLog</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// If we only know that we have a log object</span>\n    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToHtml</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L144-L153" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_ilogvisualizer" title="Start of snippet">anchor</a></sup><a id="snippet-sample_ilogvisualizer-1"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILogVisualizer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// If we already know what the type of log we have</span>\n    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">ToHtml</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TLog<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">TLog</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// If we only know that we have a log object</span>\n    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToHtml</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/Visualization/VisualizationClasses.cs#L36-L45" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_ilogvisualizer-1" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>So for an example, if we already knew that we had an <code>IssueCreated</code> object, we should be able to use Lamar like this:</p>',6),l=t('<p><a id="snippet-sample_using-visualizer-knowning-the-type"></a></p><div class="language-cs"><pre><code><span class="token comment">// Just setting up a Container and ILogVisualizer</span>\n<span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> Container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>VisualizationRegistry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> visualizer <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ILogVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// If I have an IssueCreated lob object...</span>\n<span class="token class-name"><span class="token keyword">var</span></span> created <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IssueCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// I can get the html representation:</span>\n<span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> visualizer<span class="token punctuation">.</span><span class="token function">ToHtml</span><span class="token punctuation">(</span>created<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L32-L42" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-visualizer-knowning-the-type" title="Start of snippet">anchor</a></sup><a id="snippet-sample_using-visualizer-knowning-the-type-1"></a></p><div class="language-cs"><pre><code><span class="token comment">// Just setting up a Container and ILogVisualizer</span>\n<span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> Container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>VisualizationRegistry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> visualizer <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ILogVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name"><span class="token keyword">var</span></span> items <span class="token operator">=</span> logs<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>visualizer<span class="token punctuation">.</span>ToHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;hr /&gt;&quot;</span><span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L58-L65" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-visualizer-knowning-the-type-1" title="Start of snippet">anchor</a></sup><a id="snippet-sample_using-visualizer-knowning-the-type-2"></a></p><div class="language-cs"><pre><code><span class="token comment">// Just setting up a Container and ILogVisualizer</span>\n<span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> Container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>VisualizationRegistry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> visualizer <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ILogVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// If I have an IssueCreated lob object...</span>\n<span class="token class-name"><span class="token keyword">var</span></span> created <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IssueCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// I can get the html representation:</span>\n<span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> visualizer<span class="token punctuation">.</span><span class="token function">ToHtml</span><span class="token punctuation">(</span>created<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/generic_types.cs#L36-L46" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-visualizer-knowning-the-type-2" title="Start of snippet">anchor</a></sup><a id="snippet-sample_using-visualizer-knowning-the-type-3"></a></p><div class="language-cs"><pre><code><span class="token comment">// Just setting up a Container and ILogVisualizer</span>\n<span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> Container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>VisualizationRegistry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> visualizer <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ILogVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name"><span class="token keyword">var</span></span> items <span class="token operator">=</span> logs<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>visualizer<span class="token punctuation">.</span>ToHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;hr /&gt;&quot;</span><span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/generic_types.cs#L62-L69" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-visualizer-knowning-the-type-3" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>If we had an array of log objects, but we do not already know the specific types, we can still use the more generic <code>ToHtml(object)</code> method like this:</p>',10),i=t('<p><a id="snippet-sample_using-visualizer-not-knowing-the-type"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> logs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IssueCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TaskAssigned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IssueResolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L48-L56" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-visualizer-not-knowing-the-type" title="Start of snippet">anchor</a></sup><a id="snippet-sample_using-visualizer-not-knowing-the-type-1"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> logs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IssueCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TaskAssigned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IssueResolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/generic_types.cs#L52-L60" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-visualizer-not-knowing-the-type-1" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>The next step is to create a way to identify the visualization strategy for a single type of log object. We certainly could have done this with a giant switch statement, but we wanted some extensibility for new types of activity log objects and even customer specific log types that would never, ever be in the main codebase. We settled on an interface like the one shown below that would be responsible for rendering a particular type of log object (&quot;T&quot; in the type):</p>',6),r=t('<p><a id="snippet-sample_ivisualizer_t"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVisualizer<span class="token punctuation">&lt;</span>TLog<span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToHtml</span><span class="token punctuation">(</span><span class="token class-name">TLog</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L137-L142" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_ivisualizer_t" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>Inside of the concrete implementation of <code>ILogVisualizer</code> we need to be able to pull out and use the correct <code>IVisualizer&lt;T&gt;</code> strategy for a log type. We of course used a Lamar <code>Container</code> to do the resolution and lookup, so now we also need to be able to register all the log visualization strategies in some easy way. On top of that, many of the log types were simple and could just as easily be rendered with a simple html strategy like this class:</p>',4),u=t('<p><a id="snippet-sample_defaultvisualizer"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultVisualizer<span class="token punctuation">&lt;</span>TLog<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVisualizer<span class="token punctuation">&lt;</span>TLog<span class="token punctuation">&gt;</span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToHtml</span><span class="token punctuation">(</span><span class="token class-name">TLog</span> log<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;div&gt;{0}&lt;/div&gt;&quot;</span><span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L155-L163" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_defaultvisualizer" title="Start of snippet">anchor</a></sup><a id="snippet-sample_defaultvisualizer-1"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultVisualizer<span class="token punctuation">&lt;</span>TLog<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVisualizer<span class="token punctuation">&lt;</span>TLog<span class="token punctuation">&gt;</span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToHtml</span><span class="token punctuation">(</span><span class="token class-name">TLog</span> log<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;div&gt;{0}&lt;/div&gt;&quot;</span><span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/Visualization/VisualizationClasses.cs#L47-L55" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_defaultvisualizer-1" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>Inside of our Lamar usage, if we don&#39;t have a specific visualizer for a given log type, we&#39;d just like to fallback to the default visualizer and proceed.</p><p>Alright, now that we have a real world problem, let&#39;s proceed to the mechanics of the solution.</p><h2 id="registering-open-generic-types"><a class="header-anchor" href="#registering-open-generic-types" aria-hidden="true">#</a> Registering Open Generic Types</h2><p>Let&#39;s say to begin with all we want to do is to always use the <code>DefaultVisualizer</code> for each log type. We can do that with code like this below:</p>',9),k=t('<p><a id="snippet-sample_register_open_generic_type"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">register_open_generic_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        _<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DefaultVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueResolved<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultVisualizer<span class="token punctuation">&lt;</span>IssueResolved<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L10-L27" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_register_open_generic_type" title="Start of snippet">anchor</a></sup><a id="snippet-sample_register_open_generic_type-1"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">register_open_generic_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        _<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DefaultVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">WhatDoIHave</span><span class="token punctuation">(</span>@<span class="token keyword">namespace</span><span class="token punctuation">:</span> <span class="token string">&quot;StructureMap.Testing.Acceptance.Visualization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">WhatDoIHave</span><span class="token punctuation">(</span>@<span class="token keyword">namespace</span><span class="token punctuation">:</span> <span class="token string">&quot;StructureMap.Testing.Acceptance.Visualization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueResolved<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultVisualizer<span class="token punctuation">&lt;</span>IssueResolved<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/generic_types.cs#L11-L31" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_register_open_generic_type-1" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>With the configuration above, there are no specific registrations for <code>IVisualizer&lt;IssueCreated&gt;</code>. At the first request for that interface, Lamar will run through its <a href="/guide/ioc/registration/policies.html">&quot;missing service policies&quot;</a>, one of which is to try to find registrations for an open generic type that could be closed to make a valid registration for the requested type. In the case above, Lamar sees that it has registrations for the open generic type <code>IVisualizer&lt;T&gt;</code> that could be used to create registrations for the closed type <code>IVisualizer&lt;IssueCreated&gt;</code>.</p><p>Using the <a href="/guide/ioc/diagnostics/what-do-i-have.html">WhatDoIHave()</a> diagnostics, the original state of the container for the visualization namespace is:</p><div class="language-bash"><pre><code><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>\nPluginType            Namespace                                  Lifecycle     Description                 Name\n---------------------------------------------------------------------------------------------------------------------------\nIVisualizer<span class="token operator">&lt;</span>TLog<span class="token operator">&gt;</span>     Lamar.Testing.Acceptance.Visualization     Transient     DefaultVisualizer<span class="token operator">&lt;</span>TLog<span class="token operator">&gt;</span>     <span class="token punctuation">(</span>Default<span class="token punctuation">)</span>\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>\n</code></pre></div><p>After making a request for <code>IVisualizer&lt;IssueCreated&gt;</code>, the new state is:</p><div class="language-bash"><pre><code><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>\nPluginType                    Namespace                                  Lifecycle     Description                                                                  Name\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nIVisualizer<span class="token operator">&lt;</span>IssueCreated<span class="token operator">&gt;</span>     Lamar.Testing.Acceptance.Visualization     Transient     DefaultVisualizer<span class="token operator">&lt;</span>IssueCreated<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token string">&#39;548b4256-a7aa-46a3-8072-bd8ef0c5c430&#39;</span><span class="token punctuation">)</span>     <span class="token punctuation">(</span>Default<span class="token punctuation">)</span>\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nIVisualizer<span class="token operator">&lt;</span>TLog<span class="token operator">&gt;</span>             Lamar.Testing.Acceptance.Visualization     Transient     DefaultVisualizer<span class="token operator">&lt;</span>TLog<span class="token operator">&gt;</span>                                                      <span class="token punctuation">(</span>Default<span class="token punctuation">)</span>\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>\n</code></pre></div><h2 id="generic-registrations-and-default-fallbacks"><a class="header-anchor" href="#generic-registrations-and-default-fallbacks" aria-hidden="true">#</a> Generic Registrations and Default Fallbacks</h2><p>A powerful feature of generic type support in Lamar is the ability to register specific handlers for some types, but allow users to register a &quot;fallback&quot; registration otherwise. In the case of the visualization, some types of log objects may justify some special HTML rendering while others can happily be rendered with the default visualization strategy. This behavior is demonstrated by the following code sample:</p>',12),g=t('<p><a id="snippet-sample_generic-defaults-with-fallback"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">generic_defaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// The default visualizer just like we did above</span>\n        _<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DefaultVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Register a specific visualizer for IssueCreated</span>\n        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IssueCreatedVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// We have a specific visualizer for IssueCreated</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IssueCreatedVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// We do not have any special visualizer for TaskAssigned,</span>\n    <span class="token comment">// so fall back to the DefaultVisualizer&lt;T&gt;</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>TaskAssigned<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultVisualizer<span class="token punctuation">&lt;</span>TaskAssigned<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L68-L91" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_generic-defaults-with-fallback" title="Start of snippet">anchor</a></sup><a id="snippet-sample_generic-defaults-with-fallback-1"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">generic_defaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// The default visualizer just like we did above</span>\n        _<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DefaultVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Register a specific visualizer for IssueCreated</span>\n        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IssueCreatedVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// We have a specific visualizer for IssueCreated</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IssueCreatedVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// We do not have any special visualizer for TaskAssigned,</span>\n    <span class="token comment">// so fall back to the DefaultVisualizer&lt;T&gt;</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>TaskAssigned<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultVisualizer<span class="token punctuation">&lt;</span>TaskAssigned<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/generic_types.cs#L72-L95" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_generic-defaults-with-fallback-1" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><h2 id="connecting-generic-implementations-with-type-scanning"><a class="header-anchor" href="#connecting-generic-implementations-with-type-scanning" aria-hidden="true">#</a> Connecting Generic Implementations with Type Scanning</h2><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>It&#39;s generally harmful in software projects to have a single code file that has to be frequently edited to for unrelated changes, and Lamar <code>Registry</code> classes that explicitly configure services can easily fall into that category. Using type scanning registration can help teams avoid that problem altogether by eliminating the need to make any explicit registrations as new providers are added to the codebase.</p></div><p>For this example, I have two special visualizers for the <code>IssueCreated</code> and <code>IssueResolved</code> log types:</p>',8),d=t('<p><a id="snippet-sample_specific-visualizers"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IssueCreatedVisualizer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToHtml</span><span class="token punctuation">(</span><span class="token class-name">IssueCreated</span> log<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;special html for an issue being created&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IssueResolvedVisualizer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVisualizer<span class="token punctuation">&lt;</span>IssueResolved<span class="token punctuation">&gt;</span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToHtml</span><span class="token punctuation">(</span><span class="token class-name">IssueResolved</span> log<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;special html for issue resolved&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L176-L192" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_specific-visualizers" title="Start of snippet">anchor</a></sup><a id="snippet-sample_specific-visualizers-1"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IssueCreatedVisualizer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToHtml</span><span class="token punctuation">(</span><span class="token class-name">IssueCreated</span> log<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;special html for an issue being created&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IssueResolvedVisualizer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVisualizer<span class="token punctuation">&lt;</span>IssueResolved<span class="token punctuation">&gt;</span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToHtml</span><span class="token punctuation">(</span><span class="token class-name">IssueResolved</span> log<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;special html for issue resolved&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/Visualization/VisualizationClasses.cs#L68-L84" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_specific-visualizers-1" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>In the real project that inspired this example, we had many, many more types of log visualizer strategies and it could have easily been very tedious to manually register all the different little <code>IVisualizer&lt;T&gt;</code> strategy types in a <code>Registry</code> class by hand. Fortunately, part of Lamar&#39;s <a href="/guide/ioc/registration/auto-registration-and-conventions.html">type scanning</a> support is the <code>ConnectImplementationsToTypesClosing()</code> auto-registration mechanism via generic templates for exactly this kind of scenario.</p><p>In the sample below, I&#39;ve set up a type scanning operation that will register any concrete type in the Assembly that contains the <code>VisualizationRegistry</code> that closes <code>IVisualizer&lt;T&gt;</code> against the proper interface:</p>',7),m=t('<p><a id="snippet-sample_visualizationregistry"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisualizationRegistry</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServiceRegistry</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">VisualizationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// The main ILogVisualizer service</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ILogVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LogVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// A default, fallback visualizer</span>\n        <span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DefaultVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Auto-register all concrete types that &quot;close&quot;</span>\n        <span class="token comment">// IVisualizer&lt;TLog&gt;</span>\n        <span class="token function">Scan</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>\n        <span class="token punctuation">{</span>\n            x<span class="token punctuation">.</span><span class="token function">TheCallingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            x<span class="token punctuation">.</span><span class="token function">ConnectImplementationsToTypesClosing</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L114-L135" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_visualizationregistry" title="Start of snippet">anchor</a></sup><a id="snippet-sample_visualizationregistry-1"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisualizationRegistry</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Registry</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">VisualizationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// The main ILogVisualizer service</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ILogVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LogVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// A default, fallback visualizer</span>\n        <span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DefaultVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Auto-register all concrete types that &quot;close&quot;</span>\n        <span class="token comment">// IVisualizer&lt;TLog&gt;</span>\n        <span class="token function">Scan</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>\n        <span class="token punctuation">{</span>\n            x<span class="token punctuation">.</span><span class="token function">TheCallingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            x<span class="token punctuation">.</span><span class="token function">ConnectImplementationsToTypesClosing</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IVisualizer<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/Visualization/VisualizationClasses.cs#L6-L27" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_visualizationregistry-1" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>If we create a <code>Container</code> based on the configuration above, we can see that the type scanning operation picks up the specific visualizers for <code>IssueCreated</code> and <code>IssueResolved</code> as shown in the diagnostic view below:</p><div class="language-bash"><pre><code><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>\nPluginType                     Namespace                                  Lifecycle     Description                                                               Name\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nILogVisualizer                 Lamar.Testing.Acceptance.Visualization     Transient     Lamar.Testing.Acceptance.Visualization.LogVisualizer                      <span class="token punctuation">(</span>Default<span class="token punctuation">)</span>\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nIVisualizer<span class="token operator">&lt;</span>IssueResolved<span class="token operator">&gt;</span>     Lamar.Testing.Acceptance.Visualization     Transient     Lamar.Testing.Acceptance.Visualization.IssueResolvedVisualizer            <span class="token punctuation">(</span>Default<span class="token punctuation">)</span>\n                                                                          Transient     DefaultVisualizer<span class="token operator">&lt;</span>IssueResolved<span class="token operator">&gt;</span>\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nIVisualizer<span class="token operator">&lt;</span>IssueCreated<span class="token operator">&gt;</span>      Lamar.Testing.Acceptance.Visualization     Transient     Lamar.Testing.Acceptance.Visualization.IssueCreatedVisualizer             <span class="token punctuation">(</span>Default<span class="token punctuation">)</span>\n                                                                          Transient     DefaultVisualizer<span class="token operator">&lt;</span>IssueCreated<span class="token operator">&gt;</span>\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nIVisualizer<span class="token operator">&lt;</span>TLog<span class="token operator">&gt;</span>              Lamar.Testing.Acceptance.Visualization     Transient     DefaultVisualizer<span class="token operator">&lt;</span>TLog<span class="token operator">&gt;</span>                                                   <span class="token punctuation">(</span>Default<span class="token punctuation">)</span>\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nIVisualizer<span class="token operator">&lt;</span>TLog<span class="token operator">&gt;</span>              Lamar.Testing.Acceptance.Visualization     Transient     DefaultVisualizer<span class="token operator">&lt;</span>TLog<span class="token operator">&gt;</span>                                                   <span class="token punctuation">(</span>Default<span class="token punctuation">)</span>\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>\n\n</code></pre></div><p>The following sample shows the <code>VisualizationRegistry</code> in action to combine the type scanning registration plus the default fallback behavior for log types that do not have any special visualization logic:</p>',8),h=t('<p><a id="snippet-sample_visualization-registry-in-action"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">visualization_registry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> Container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>VisualizationRegistry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IssueCreatedVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueResolved<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IssueResolvedVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// We have no special registration for TaskAssigned,</span>\n    <span class="token comment">// so fallback to the default visualizer</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>TaskAssigned<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultVisualizer<span class="token punctuation">&lt;</span>TaskAssigned<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/generic_types.cs#L93-L112" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_visualization-registry-in-action" title="Start of snippet">anchor</a></sup><a id="snippet-sample_visualization-registry-in-action-1"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">visualization_registry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> Container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>VisualizationRegistry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">WhatDoIHave</span><span class="token punctuation">(</span>@<span class="token keyword">namespace</span><span class="token punctuation">:</span> <span class="token string">&quot;StructureMap.Testing.Acceptance.Visualization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueCreated<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IssueCreatedVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>IssueResolved<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IssueResolvedVisualizer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// We have no special registration for TaskAssigned,</span>\n    <span class="token comment">// so fallback to the default visualizer</span>\n    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IVisualizer<span class="token punctuation">&lt;</span>TaskAssigned<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultVisualizer<span class="token punctuation">&lt;</span>TaskAssigned<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/generic_types.cs#L97-L117" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_visualization-registry-in-action-1" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p>',5);e.render=function(t,p,e,f,y,v){return s(),n("div",null,[o,a(" snippet: sample_ILogVisualizer "),c,a(" snippet: sample_using-visualizer-knowning-the-type "),l,a(" snippet: sample_using-visualizer-not-knowing-the-type "),i,a(" snippet: sample_IVisualizer_T "),r,a(" snippet: sample_DefaultVisualizer "),u,a(" snippet: sample_register_open_generic_type "),k,a(" snippet: sample_generic-defaults-with-fallback "),g,a(" snippet: sample_specific-visualizers "),d,a(" snippet: sample_VisualizationRegistry "),m,a(" snippet: sample_visualization-registry-in-action "),h])};export{p as __pageData,e as default};
