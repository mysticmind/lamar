import{o as n,c as s,a,b as t}from"./app.21b67795.js";const e='{"title":"Service Lifetimes","description":"","frontmatter":{},"relativePath":"guide/ioc/lifetime.md","lastUpdated":1630569938693}',p={},o=t('<h1 id="service-lifetimes"><a class="header-anchor" href="#service-lifetimes" aria-hidden="true">#</a> Service Lifetimes</h1><p>Lamar&#39;s service lifetime support exactly reflects the behavior of the <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core DI container, as <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.0#service-lifetimes-and-registration-options" target="_blank" rel="noopener noreferrer">described in this article</a>. This behavior is different than the older <a href="http://structuremap.github.io/object-lifecycle/" target="_blank" rel="noopener noreferrer">StructureMap lifecycle logic</a>.</p><p>The supported life-cycles are:</p><ol><li><code>Singleton</code> -- Only one object instance is created for the entire application</li><li><code>Scoped</code> -- Only one object instance is created for a container, whether that is the root container or a scoped (nested) container. This maps to StructureMap&#39;s <code>ContainerScoped</code> lifecycle</li><li><code>Transient</code> -- A new object instance is created for every single request, including dependencies. This behavior is <strong>not consistent</strong> with StructureMap&#39;s old <code>Transient</code> and maps to StructureMap&#39;s old <code>AlwaysUnique</code> lifecycle</li></ol><p>There is no equivalent in Lamar to StructureMap&#39;s version of <code>Transient</code> or the rarely used <code>ThreadLocal</code> lifecycle. <code>HttpContext</code> related scopes are no longer supported, with the assumption that <code>Scoped</code> is a useful replacement for HTTP request scoping of services.</p><p>Here are some sample usages of registering services with a lifetime:</p>',6),c=t('<p><a id="snippet-sample_lifetimeregistry"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LifetimeRegistry</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServiceRegistry</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">LifetimeRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Lifetimes the ASP.Net Core way</span>\n        <span class="token comment">// The registration methods are all extension</span>\n        <span class="token comment">// methods, so hence, &quot;this.&quot;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">,</span> AWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IClock<span class="token punctuation">,</span> Clock<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUnitOfWork<span class="token punctuation">,</span> UnitOfWork<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">// Lifetimes the old StructureMap way</span>\n        <span class="token comment">// Transient is the default</span>\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IClock<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Clock<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">// or</span>\n\n        <span class="token generic-method"><span class="token function">ForSingletonOf</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IClock<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Clock<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUnitOfWork<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UnitOfWork<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scoped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Samples/Lifetimes.cs#L7-L34" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_lifetimeregistry" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p>',3);p.render=function(t,e,p,i,l,u){return n(),s("div",null,[o,a(" snippet: sample_LifetimeRegistry "),c])};export{e as __pageData,p as default};
