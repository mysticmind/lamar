import{o as n,c as a,a as s,b as t}from"./app.21b67795.js";const e='{"title":"Integration with ASP.Net Core","description":"","frontmatter":{},"headers":[{"level":2,"title":"ASP.Net Core v3.*","slug":"asp-net-core-v3"},{"level":2,"title":"Worker Service Core v3.*","slug":"worker-service-core-v3"},{"level":2,"title":"Extended Command Line Diagnostics for ASP.Net Core","slug":"extended-command-line-diagnostics-for-asp-net-core"},{"level":2,"title":"lamar-services","slug":"lamar-services"},{"level":2,"title":"lamar-scanning","slug":"lamar-scanning"},{"level":2,"title":"lamar-validate","slug":"lamar-validate"},{"level":2,"title":"Adding Lamar Environment Checks","slug":"adding-lamar-environment-checks"}],"relativePath":"guide/ioc/aspnetcore.md","lastUpdated":1630569938693}',o={},p=t('<h1 id="integration-with-asp-net-core"><a class="header-anchor" href="#integration-with-asp-net-core" aria-hidden="true">#</a> Integration with <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core</h1><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>As of Lamar.Microsoft.DependencyInjection 4.0, Lamar successfully support .Net Core 3 and <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core 3.0.</p></div><p>To use Lamar within <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core applications, also install the <a href="https://www.nuget.org/packages/Lamar.Microsoft.DependencyInjection/" target="_blank" rel="noopener noreferrer">Lamar.Microsoft.DependencyInjection</a> library from NuGet to your <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core project (and you can thank Microsoft for the clumsy naming convention, thank you).</p><p>With that NuGet installed, your normal <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core bootstrapping changes just slightly. When you bootstrap your <code>IWebHostBuilder</code> object that configures <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core, you also need to call the <code>UseLamar()</code> method as shown below:</p>',4),c=t('<p><a id="snippet-sample_getting-started-main"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebHostBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    builder\n        <span class="token comment">// Replaces the built in DI container</span>\n        <span class="token comment">// with Lamar</span>\n        <span class="token punctuation">.</span><span class="token function">UseLamar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        \n        <span class="token comment">// Normal ASP.Net Core bootstrapping</span>\n        <span class="token punctuation">.</span><span class="token function">UseUrls</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5002&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">UseKestrel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    builder<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.AspNetCoreTests/Samples/StartUp.cs#L14-L31" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_getting-started-main" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The <code>Startup.ConfigureServices(ServiceRegistry)</code> convention does not work as of <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core 2.1. Use <code>ConfigureContainer(ServiceRegistry)</code> instead.</p></div><p>If you use a <code>StartUp</code> class for extra configuration, your <code>ConfigureContainer()</code> method <em>can</em> take in a <code>ServiceRegistry</code> object from Lamar for service registrations in place of the <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core <code>IServiceCollection</code> interface as shown below:</p>',5),r=t('<p><a id="snippet-sample_getting-started-startup"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// Take in Lamar&#39;s ServiceRegistry instead of IServiceCollection</span>\n    <span class="token comment">// as your argument, but fear not, it implements IServiceCollection</span>\n    <span class="token comment">// as well</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ServiceRegistry</span> services<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Supports ASP.Net Core DI abstractions</span>\n        services<span class="token punctuation">.</span><span class="token function">AddMvc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        services<span class="token punctuation">.</span><span class="token function">AddLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">// Also exposes Lamar specific registrations</span>\n        <span class="token comment">// and functionality</span>\n        services<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span>\n        <span class="token punctuation">{</span>\n            s<span class="token punctuation">.</span><span class="token function">TheCallingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            s<span class="token punctuation">.</span><span class="token function">WithDefaultConventions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        app<span class="token punctuation">.</span><span class="token function">UseMvc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.AspNetCoreTests/Samples/StartUp.cs#L35-L61" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_getting-started-startup" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>You can also still write <code>ConfigureServices(IServiceCollection)</code>, but you&#39;d miss out on most of Lamar&#39;s extra functionality beyond what that abstraction provides.</p><p>And that is that, you&#39;re ready to run your <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core application with Lamar handling service resolution and object cleanup during your HTTP requests.</p><h2 id="asp-net-core-v3"><a class="header-anchor" href="#asp-net-core-v3" aria-hidden="true">#</a> <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core v3.*</h2><p>The set up with <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core v3 isn&#39;t really any different, but there&#39;s a known <em>gotcha</em> with the <code>AddControllers()</code> call as shown below:</p>',7),l=t('<p><a id="snippet-sample_integration-with-mvc3"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n        Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n            \n            <span class="token comment">// Add Lamar</span>\n            <span class="token punctuation">.</span><span class="token function">UseLamar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            \n            \n            \n            <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=&gt;</span>\n            <span class="token punctuation">{</span>\n                webBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                webBuilder<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>services <span class="token operator">=&gt;</span>\n                <span class="token punctuation">{</span>\n                    <span class="token comment">// This is important, the call to AddControllers()</span>\n                    <span class="token comment">// cannot be made before the usage of ConfigureWebHostDefaults</span>\n                    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/LamarWithAspNetCoreMvc3/Program.cs#L14-L42" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_integration-with-mvc3" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>To play it safe, add any registrations or configuration directly related to MVC Core directly within or after the call to <code>IHostBuilder.ConfigureWebHostDefaults()</code>. This is strictly an issue with ordering within MVC Core guts, and not particularly a problem with Lamar per se.</p><h2 id="worker-service-core-v3"><a class="header-anchor" href="#worker-service-core-v3" aria-hidden="true">#</a> Worker Service Core v3.*</h2><p>To set up for a worker service, you&#39;ll use the same ConfigureContainer() albeit with a different signature.</p>',6),i=t('<p><a id="snippet-sample_startup-worker-service"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n\tHost<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">UseLamar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostContext<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\tservices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHostedService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Worker<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ConfigureContainer</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Lamar<span class="token punctuation">.</span>ServiceRegistry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// Also exposes Lamar specific registrations</span>\n\t\t\t<span class="token comment">// and functionality</span>\n\t\t\tservices<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span>\n\t\t\t<span class="token punctuation">{</span>\n\t\t\t\ts<span class="token punctuation">.</span><span class="token function">TheCallingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\ts<span class="token punctuation">.</span><span class="token function">WithDefaultConventions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/SampleWorkerApp/Program.cs#L18-L36" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_startup-worker-service" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><h2 id="extended-command-line-diagnostics-for-asp-net-core"><a class="header-anchor" href="#extended-command-line-diagnostics-for-asp-net-core" aria-hidden="true">#</a> Extended Command Line Diagnostics for <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core</h2><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>If you are targeting .Net Core 3.0 and/or <code>netstandard2.1</code>, use the newly consolidated <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">HostBuilder</a> instead of the previous <code>IWebHostBuilder</code>.</p></div><p>New with the Lamar 3.1.0 release is a separate Nuget package named <em>Lamar.Diagnostics</em> that can be used to add easy access to the <a href="/guide/ioc/diagnostics/">Lamar diagnostics</a> for your <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core application from the command line.</p><p>First, you need to be using the <a href="https://jasperfx.github.io/oakton/documentation/aspnetcore/" target="_blank" rel="noopener noreferrer">Oakton.AspNetCore</a> package to execute commands in your <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core application like this:</p>',7),u=t('<p><a id="snippet-sample_using-oakton-aspnetcore"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nregistry<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>\n<span class="token punctuation">{</span>\n    x<span class="token punctuation">.</span><span class="token function">Assembly</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    x<span class="token punctuation">.</span><span class="token function">WithDefaultConventions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> builder\n    <span class="token comment">// Replaces the built in DI container</span>\n    <span class="token comment">// with Lamar</span>\n    <span class="token punctuation">.</span><span class="token function">UseLamar</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Normal ASP.Net Core bootstrapping</span>\n        x<span class="token punctuation">.</span><span class="token function">UseUrls</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5002&quot;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">UseKestrel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token punctuation">.</span><span class="token function">RunOaktonCommands</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/SampleWebApp/Program.cs#L22-L46" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-oakton-aspnetcore" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>Including this <em>Lamar.Diagnostics</em> NuGet into your <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core application will add some additional Lamar diagnostic commands. If you open a command line tool to the root directory of your <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core project with the <em>Lamar.Diagnostics</em> and <em>Oakton.AspNetCore</em> NuGet installed and type the command for CLI usage <code>dotnet run -- ?</code> or <code>dotnet run -- help</code>, you&#39;ll get something like this:</p><div class="language-bash"><pre><code>Searching <span class="token string">&#39;Lamar.Diagnostics, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&#39;</span> <span class="token keyword">for</span> commands\n\n  -----------------------------------------------------------------------------------\n    Available commands:\n  -----------------------------------------------------------------------------------\n         check-env -<span class="token operator">&gt;</span> Execute all environment checks against the application\n    lamar-scanning -<span class="token operator">&gt;</span> Runs Lamar&#39;s <span class="token builtin class-name">type</span> scanning diagnostics\n    lamar-services -<span class="token operator">&gt;</span> List all the registered Lamar services\n    lamar-validate -<span class="token operator">&gt;</span> Runs all the Lamar container validations\n               run -<span class="token operator">&gt;</span> Runs the configured AspNetCore application\n  -----------------------------------------------------------------------------------\n</code></pre></div><p>As you can see, there are three additional commands specific for the <a href="/guide/ioc/diagnostics/">built in Lamar diagnostics</a>. All of these commands support the <a href="https://jasperfx.github.io/oakton/documentation/aspnetcore/" target="_blank" rel="noopener noreferrer">Oakton.AspNetCore</a> flags for overriding the <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core hosting environment name, configuration settings, and default log level.</p><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>When all of these commands execute, they <em>do</em> build the underlying <code>IWebHost</code> for your application, but they do <strong>not</strong> start the Kestrel server or run any of your application <code>IHostedService</code> registrations. Your application will be torn down and disposed as part of the command execution as well.</p></div><h2 id="lamar-services"><a class="header-anchor" href="#lamar-services" aria-hidden="true">#</a> lamar-services</h2><p>This command displays the output of Lamar&#39;s <a href="/guide/ioc/diagnostics/what-do-i-have.html">WhatDoIHave()</a> function against the underlying Lamar container of the configured <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core application. The basic usage is <code>dotnet run -- lamar-services</code>.</p><p>The full usage is shown below:</p><div class="language-bash"><pre><code> Usages <span class="token keyword">for</span> <span class="token string">&#39;lamar-services&#39;</span> <span class="token punctuation">(</span>List all the registered Lamar services<span class="token punctuation">)</span>\n  lamar-services <span class="token punctuation">[</span>-f, --file <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-n, --namespace <span class="token operator">&lt;</span>namespace<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-a, --assembly <span class="token operator">&lt;</span>assembly<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-t, --type <span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-b, --build-plans<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e, --environment <span class="token operator">&lt;</span>environment<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-v, --verbose<span class="token punctuation">]</span> <span class="token punctuation">[</span>-l, --log-level <span class="token operator">&lt;</span>logleve<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>----config:<span class="token operator">&lt;</span>prop<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">]</span>\n\n  ----------------------------------------------------------------------------------------------------------------------------------------\n    Flags\n  ----------------------------------------------------------------------------------------------------------------------------------------\n                  <span class="token punctuation">[</span>-f, --file <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Optional <span class="token function">file</span> to <span class="token function">write</span> the results\n        <span class="token punctuation">[</span>-n, --namespace <span class="token operator">&lt;</span>namespace<span class="token operator">&gt;</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Optionally filter the results to only types <span class="token keyword">in</span> this namespace\n          <span class="token punctuation">[</span>-a, --assembly <span class="token operator">&lt;</span>assembly<span class="token operator">&gt;</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Optionally filter the results to only types <span class="token keyword">in</span> this assembly\n                  <span class="token punctuation">[</span>-t, --type <span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Optionally filter the results to only this named type. Can be either a <span class="token builtin class-name">type</span> name or a full name\n                  <span class="token punctuation">[</span>-b, --build-plans<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Show the full build plans\n    <span class="token punctuation">[</span>-e, --environment <span class="token operator">&lt;</span>environment<span class="token operator">&gt;</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Use to override the ASP.Net Environment name\n                      <span class="token punctuation">[</span>-v, --verbose<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Write out much <span class="token function">more</span> information at startup and enables console logging\n          <span class="token punctuation">[</span>-l, --log-level <span class="token operator">&lt;</span>logleve<span class="token operator">&gt;</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Override the log level\n          <span class="token punctuation">[</span>----config:<span class="token operator">&lt;</span>prop<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Overwrite individual configuration items\n  ----------------------------------------------------------------------------------------------------------------------------------------\n</code></pre></div><p>The output can be filtered by using the <code>--namespace [namespace name]</code> or <code>--assembly [assembly name]</code> flags if you&#39;re only looking for certain registrations. The <code>--type [type name]</code> flag can help you look for specific types. This flag can either match against a type&#39;s full name or just the type name and looks for both service types and implementation types.</p><p>You can write the results to a text file instead by specifying a file location with the <code>--file [file name]</code> flag.</p><p>Lastly, you can instead write out the [build plans]/guide/ioc/diagnostics/build-plans) with the same filtering options using the <code>--build-plans</code> flag.</p><h2 id="lamar-scanning"><a class="header-anchor" href="#lamar-scanning" aria-hidden="true">#</a> lamar-scanning</h2><p>The <code>lamar-scanning</code> command gives you quick access to the <a href="/guide/ioc/diagnostics/type-scanning.html">type scanning diagnostics</a> functionality in Lamar.</p><p>Using the command <code>dotnet run -- lamar-scanning</code> command on the sample application shown earlier in this page results in this output:</p><div class="language-bash"><pre><code>Searching <span class="token string">&#39;Lamar.Diagnostics, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&#39;</span> <span class="token keyword">for</span> commands\nAll Scanners\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>\n\nAssemblies\n----------\n* SampleWebApp, <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token number">1.0</span>.0.0, <span class="token assign-left variable">Culture</span><span class="token operator">=</span>neutral, <span class="token assign-left variable">PublicKeyToken</span><span class="token operator">=</span>null\n\nConventions\n--------\n* Default I<span class="token punctuation">[</span>Name<span class="token punctuation">]</span>/<span class="token punctuation">[</span>Name<span class="token punctuation">]</span> registration convention\n\n\nNo problems were encountered <span class="token keyword">in</span> exporting types from Assemblies\n</code></pre></div><p>Any type scanning errors detected during application bootstrapping will be shown in the output. If there are any errors, this command will fail by returning a non-zero return code. You could use this command as part of your continuous integration process to catch any kind of assembly loading problems found in type scanning.</p><h2 id="lamar-validate"><a class="header-anchor" href="#lamar-validate" aria-hidden="true">#</a> lamar-validate</h2><p>The <code>lamar-validate</code> command will build your <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core application (the <code>IWebHost</code>), then use Lamar&#39;s <a href="/guide/ioc/diagnostics/validating-container-configuration.html">built in container validation</a> to verify that the container can successfully build all known registrations. All validation errors will be reported, and the command will fail if there are any errors detected. This command can be used in continuous integration builds as another type of check on the system.</p><p>In its default usage, <code>dotnet run -- lamar-validate</code> will only validate the container configuration. If you use the <code>dotnet run -- lamar-validate Full</code> usage, the command will also execute any Lamar <a href="/guide/ioc/diagnostics/environment-tests.html">environment tests</a>.</p><h2 id="adding-lamar-environment-checks"><a class="header-anchor" href="#adding-lamar-environment-checks" aria-hidden="true">#</a> Adding Lamar Environment Checks</h2><p>You can also add Lamar&#39;s container validation and its own environment tests to the <em>Oakton.AspNetCore</em> environment check functionality with the following usage of the <code>IServiceCollection.CheckLamarConfiguration()</code> extension method from <em>Lamar.Diagnostics</em> as shown below in a sample <code>Startup.ConfigureContainer()</code> method:</p>',24),k=t('<p><a id="snippet-sample_startup-with-check-lamar-configuration"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// Take in Lamar&#39;s ServiceRegistry instead of IServiceCollection</span>\n    <span class="token comment">// as your argument, but fear not, it implements IServiceCollection</span>\n    <span class="token comment">// as well</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ServiceRegistry</span> services<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Supports ASP.Net Core DI abstractions</span>\n        services<span class="token punctuation">.</span><span class="token function">AddMvc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        services<span class="token punctuation">.</span><span class="token function">AddLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Also exposes Lamar specific registrations</span>\n        <span class="token comment">// and functionality</span>\n        services<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span>\n        <span class="token punctuation">{</span>\n            s<span class="token punctuation">.</span><span class="token function">TheCallingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            s<span class="token punctuation">.</span><span class="token function">WithDefaultConventions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        \n        <span class="token comment">// This adds Lamar&#39;s validation to the </span>\n        <span class="token comment">// Oakton.AspNetCore environment check support</span>\n        services<span class="token punctuation">.</span><span class="token function">CheckLamarConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        app<span class="token punctuation">.</span><span class="token function">UseMvc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/SampleWebApp/Startup.cs#L16-L47" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_startup-with-check-lamar-configuration" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>Now, when you run the <code>dotnet run -- check-env</code> command for your application, you <em>should</em> see a check for the Lamar container:</p><div class="language-bash"><pre><code>Searching <span class="token string">&#39;Lamar.Diagnostics, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&#39;</span> <span class="token keyword">for</span> commands\nRunning Environment Checks\n   <span class="token number">1</span>.<span class="token punctuation">)</span> Success: Lamar IoC Service Registrations\nAll environment checks are good<span class="token operator">!</span>\n\n</code></pre></div>',5);o.render=function(t,e,o,d,m,g){return n(),a("div",null,[p,s(" snippet: sample_getting-started-main "),c,s(" snippet: sample_getting-started-startup "),r,s(" snippet: sample_integration-with-mvc3 "),l,s(" snippet: sample_startup-worker-service "),i,s(" snippet: sample_using-oakton-aspnetcore "),u,s(" snippet: sample_startup-with-check-lamar-configuration "),k])};export{e as __pageData,o as default};
